generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Many-to-many relation with conversations
  conversations UserConversation[]
  
  // Many-to-many relation for seen messages
  seenMessages  MessageSeen[]
  
  // One-to-many relation for sent messages
  messages      Message[]
  accounts      Account[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  lastMessageAt DateTime     @default(now())
  name          String?
  isGroup       Boolean      @default(false)

  messages      Message[]
  users         UserConversation[]
}

// Junction table for the many-to-many relationship between User and Conversation
model UserConversation {
  userId         String
  conversationId String
  
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

model Message {
  id        String   @id @default(uuid())
  body      String?
  image     String?
  createdAt DateTime @default(now())

  // Many-to-many relation for seen messages
  seenBy    MessageSeen[]

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

// Junction table for the many-to-many relationship between User and seen Messages
model MessageSeen {
  userId    String
  messageId String
  
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([userId, messageId])
}